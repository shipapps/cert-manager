assets:
  v1:
    - github:
          repo: jetstack/cert-manager
          path: deploy/manifests/00-crds.yaml
          strip_path: true
          dest: base/
          ref: v0.7.0
    - inline:
          dest: base/namespace.yaml
          contents: |
            ---
            apiVersion: v1
            kind: Namespace
            metadata:
              name: cert-manager
              labels:
                "certmanager.k8s.io/disable-validation": "true"
    - github:
          repo: jetstack/cert-manager
          path: deploy/charts/cert-manager
          strip_path: true
          dest: chart
          ref: v0.7.0

config:
  v1: []
lifecycle:
  v1:
    - message:
        contents: |
          ## Cert Manager

          This guide will walk you through configuring Cert Manager for your Kubernetes cluster.

          It is roughly equivalent to following the [Installing with Helm](https://docs.cert-manager.io/en/latest/getting-started/install.html#installing-with-helm) guide, but includes opportunities to add [Kustomize](https://kustomize.io) patches on top of the rendered helm chart before depoying.

          Tiller is not required for this install, all Helm templating is done client-side.
    - render:
        root: .
    - helmIntro: {}
    - helmValues:
        path: chart/values.yaml
        readme:
          contents: |
            ## [Configuration](https://github.com/jetstack/cert-manager/blob/master/deploy/charts/cert-manager/README.md#configuration)

            The following table lists the configurable parameters of the cert-manager chart and their default values.

            | Parameter | Description | Default |
            | --------- | ----------- | ------- |
            | `global.imagePullSecrets` | Reference to one or more secrets to be used when pulling images | `[]` |
            | `global.rbac.create` | If `true`, create and use RBAC resources (includes sub-charts) | `true` |
            | `image.repository` | Image repository | `quay.io/jetstack/cert-manager-controller` |
            | `image.tag` | Image tag | `v0.7.0` |
            | `image.pullPolicy` | Image pull policy | `IfNotPresent` |
            | `replicaCount`  | Number of cert-manager replicas  | `1` |
            | `clusterResourceNamespace` | Override the namespace used to store DNS provider credentials etc. for ClusterIssuer resources | Same namespace as cert-manager pod
            | `leaderElection.Namespace` | Override the namespace used to store the ConfigMap for leader election | Same namespace as cert-manager pod
            | `extraArgs` | Optional flags for cert-manager | `[]` |
            | `extraEnv` | Optional environment variables for cert-manager | `[]` |
            | `serviceAccount.create` | If `true`, create a new service account | `true` |
            | `serviceAccount.name` | Service account to be used. If not set and `serviceAccount.create` is `true`, a name is generated using the fullname template |  |
            | `resources` | CPU/memory resource requests/limits | |
            | `securityContext.enabled` | Enable security context | `false` |
            | `securityContext.fsGroup` | Group ID for the container | `1001` |
            | `securityContext.runAsUser` | User ID for the container | `1001` |
            | `nodeSelector` | Node labels for pod assignment | `{}` |
            | `affinity` | Node affinity for pod assignment | `{}` |
            | `tolerations` | Node tolerations for pod assignment | `[]` |
            | `ingressShim.defaultIssuerName` | Optional default issuer to use for ingress resources |  |
            | `ingressShim.defaultIssuerKind` | Optional default issuer kind to use for ingress resources |  |
            | `ingressShim.defaultACMEChallengeType` | Optional default challenge type to use for ingresses using ACME issuers |  |
            | `ingressShim.defaultACMEDNS01ChallengeProvider` | Optional default DNS01 challenge provider to use for ingresses using ACME issuers with DNS01 |  |
            | `podAnnotations` | Annotations to add to the cert-manager pod | `{}` |
            | `podDnsPolicy` | Optional cert-manager pod [DNS policy](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pods-dns-policy) |  |
            | `podDnsConfig` | Optional cert-manager pod [DNS configurations](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pods-dns-config) |  |
            | `podLabels` | Labels to add to the cert-manager pod | `{}` |
            | `priorityClassName`| Priority class name for cert-manager and webhook pods | `""` |
            | `http_proxy` | Value of the `HTTP_PROXY` environment variable in the cert-manager pod | |
            | `https_proxy` | Value of the `HTTPS_PROXY` environment variable in the cert-manager pod | |
            | `no_proxy` | Value of the `NO_PROXY` environment variable in the cert-manager pod | |
            | `webhook.enabled` | Toggles whether the validating webhook component should be installed | `true` |
            | `webhook.replicaCount` | Number of cert-manager webhook replicas | `1` |
            | `webhook.podAnnotations` | Annotations to add to the webhook pods | `{}` |
            | `webhook.extraArgs` | Optional flags for cert-manager webhook component | `[]` |
            | `webhook.resources` | CPU/memory resource requests/limits for the webhook pods | |
            | `webhook.image.repository` | Webhook image repository | `quay.io/jetstack/cert-manager-webhook` |
            | `webhook.image.tag` | Webhook image tag | `v0.7.0` |
            | `webhook.image.pullPolicy` | Webhook image pull policy | `IfNotPresent` |
            | `webhook.injectAPIServerCA` | if true, the apiserver's CABundle will be automatically injected into the ValidatingWebhookConfiguration resource | `true` |
            | `cainjector.enabled` | Toggles whether the cainjector component should be installed (required for the webhook component to work) | `true` |
            | `cainjector.replicaCount` | Number of cert-manager cainjector replicas | `1` |
            | `cainjector.podAnnotations` | Annotations to add to the cainjector pods | `{}` |
            | `cainjector.extraArgs` | Optional flags for cert-manager cainjector component | `[]` |
            | `cainjector.resources` | CPU/memory resource requests/limits for the cainjector pods | |
            | `cainjector.image.repository` | cainjector image repository | `quay.io/jetstack/cert-manager-cainjector` |
            | `cainjector.image.tag` | cainjector image tag | `v0.7.0` |
            | `cainjector.image.pullPolicy` | cainjector image pull policy | `IfNotPresent` |

    - render:
        root: .
        assets:
          v1:
            - helm:
                dest: base/cert-manager
                helm_opts:
                  - --namespace=cert-manager
                  - --name=cert-manager
                local:
                  chart_root: ./chart
                values_from:
                  # hack, helmValues still needs a configurable dest path for us to store the output
                  path: .ship/tmp
    - kustomizeIntro: {}
    - kustomize:
        base: base
        overlay: overlays/ship
        dest: cert-manager-all.yaml
    - message:
        contents: |
          ## All set

          You can deploy cert manager to your cluster with

              kubectl apply -f cert-manager-all.yamll

          Next, you can [verify the installation](https://docs.cert-manager.io/en/latest/getting-started/install.html#verifying-the-installation) according to the cert-manager docs.


